{"version":3,"sources":["components/Button/Button.tsx","components/Counter/Counter.tsx","components/Counter/SettingCounter.tsx","redux/Reducer.ts","App.tsx","reportWebVitals.ts","redux/store.ts","utils/localStorage-utils.ts","index.tsx"],"names":["Button","props","onClick","disabled","className","title","Counter","error","incDisabled","resetDisabled","value","maxValue","changeValue","Number","resetValue","SettingCount","type","min","step","onChange","e","max","currentTarget","changeSettingValue","minValue","String","toDisplay","console","log","setDisabled","InitialState","App","useSelector","state","counter","maxValueCounter","minValueCounter","dispatch","useDispatch","useState","setError","setMaxvalue","setMinvalue","buttonSetDisabledAC","SetMaxMinValueFromLSAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d0e6e91.chunk.js","sourcesContent":["import './Button.css';\nimport React, {MouseEvent} from 'react';\n\ntype ButtonType = {\n    onClick: (e: MouseEvent<HTMLButtonElement>) => void\n    disabled: boolean\n    title: string\n    className: string\n}\n\nexport const Button = (props: ButtonType) => {\n\n    return (\n        <button\n            onClick={props.onClick}\n            disabled={props.disabled}\n            className={props.className}>\n            {props.title}\n        </button>\n    );\n};","import './Counter.css';\nimport React from 'react';\nimport {Button} from \"../Button/Button\";\n\n\ntype CounterType = {\n    value: number\n    changeValue: (value: number, maxValue: number) => void\n    resetValue: () => void\n    maxValue: number\n    minValue: number\n    error: string\n    incDisabled: boolean\n    resetDisabled: boolean\n}\n\nexport const Counter = (props: CounterType) => {\n\n\n    // функции-обработчики событий, при нажатии на кнопки\n    function onClickIncHendler() {\n        props.changeValue(Number(props.value), Number(props.maxValue))}\n\n    function onClickResetHendler() {\n        props.resetValue()}\n\n    return (\n        <div className='conteiner'>\n            <div className=\"counter\">\n                <div className={\"display\"}>\n                    {\n                        props.error ? <span className=\"errorMessage\">{props.error}</span> :\n                            props.incDisabled && props.resetDisabled && !props.error ?\n                                <span> enter values and press \"set\" </span> :\n                                <span\n                                    className={props.value === props.maxValue ? 'maxValue' : \"\"}> {props.value} </span>}\n                </div>\n\n                <Button\n                    className={props.incDisabled ? \"disabled\" : \"\"}\n                    onClick={onClickIncHendler}\n                    disabled={props.incDisabled}\n                    title={\"inc\"}/>\n                <Button\n                    className={props.resetDisabled ? \"disabled\" : \"\"}\n                    onClick={onClickResetHendler}\n                    disabled={props.resetDisabled}\n                    title={\"reset\"}/>\n            </div>\n        </div>\n    );\n}\n","import React, {ChangeEvent} from 'react';\r\nimport './Counter.css';\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype SettingCountType = {\r\n    maxValue: number\r\n    minValue: number\r\n    toDisplay: (minValue: number, maxValue: number) => void\r\n    error: string\r\n    setDisabled: boolean\r\n    changeSettingValue: (maxValue: number, minValue: number) => void\r\n}\r\n\r\nexport const SettingCount = (props: SettingCountType) => {\r\n\r\n    //изменяем максимал и минимал значения\r\n\r\n    const MaxOnchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let max = Number(e.currentTarget.value)\r\n        props.changeSettingValue(max, props.minValue)\r\n    }\r\n    const MinOnchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let min = Number(e.currentTarget.value)\r\n        props.changeSettingValue(props.maxValue, min)\r\n    }\r\n\r\n// нажимаем кнопку set\r\n    const onClickHendler = () => {\r\n        props.toDisplay(props.minValue, props.maxValue)\r\n        console.log(props.setDisabled)\r\n    }\r\n\r\n    return (\r\n        <div className='conteiner'>\r\n            <div className=\"counter\">\r\n                <div className={\"display\"}>\r\n                    <div className={\"SET\"}>\r\n                        <label>max value:\r\n\r\n                            <input className={props.error ? \"error\" : \"\"}\r\n                                   type={\"number\"} min={\"0\"} step={\"0\"}\r\n                                   value={props.maxValue}\r\n                                   onChange={MaxOnchangeHandler}/>\r\n                        </label><br/>\r\n                        <label>min value: <input\r\n                            className={props.error ? \"error\" : \"\"}\r\n                            type={\"number\"}\r\n                            min={\"0\"}\r\n                            step={\"0\"}\r\n                            value={String(props.minValue)}\r\n                            onChange={MinOnchangeHandler}/>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <Button onClick={onClickHendler}\r\n                        disabled={props.setDisabled}\r\n                        title={\"set\"}\r\n                        className={props.setDisabled ? \"disabled\" : \"\"}\r\n                />\r\n            </div>\r\n        </div>)\r\n}\r\n","export const InitialState = {\r\n    value: 0,\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    incDisabled: true,\r\n    resetDisabled: true,\r\n    setDisabled: true,\r\n}\r\ntype InitialStateType = typeof InitialState\r\n\r\nexport const counterReducer = (state = InitialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BUTTON-SET-DISABLED\":\r\n            return (action.maxValue > action.minValue && action.maxValue > 0 && action.minValue > 0) ?\r\n                {\r\n                    ...state,\r\n                    setDisabled: false,\r\n                    incDisabled: true,\r\n                    resetDisabled: true\r\n                } :\r\n                {\r\n                    ...state,\r\n                    setDisabled: true,\r\n                    incDisabled: true,\r\n                    resetDisabled: true\r\n                }\r\n        case \"INC-VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value + 1,\r\n                setDisabled: true\r\n            }\r\n        case \"SET-VALUE-FROM-LS\":\r\n            return {...state, value: action.value}\r\n        case \"SET-MAX-MIN-VALUE-FROM-LS\":\r\n            return {\r\n                ...state,\r\n                value: action.minValue,\r\n                maxValue: action.maxValue,\r\n                minValue: action.minValue,\r\n                incDisabled: false,\r\n                resetDisabled: false,\r\n                setDisabled: false,\r\n            }\r\n        case \"RESET-VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.minValue,\r\n                resetDisabled: false,\r\n                incDisabled: false,\r\n                setDisabled: true\r\n            }\r\n        case \"VALUE-EQUAL-MAX-VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.maxValue,\r\n                incDisabled: true\r\n            }\r\n        case \"ERROR\":\r\n            return {\r\n                ...state,\r\n                setDisabled: true,\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const incCounterValueAC = () => ({type: \"INC-VALUE\"} as const)\r\nexport const buttonSetDisabledAC = (maxValue: number, minValue: number) => ({\r\n    type: \"BUTTON-SET-DISABLED\",\r\n    maxValue,\r\n    minValue\r\n} as const)\r\nexport const ErrorAC = () => ({type: \"ERROR\"} as const)\r\nexport const resetCounterValueAC = () => ({type: \"RESET-VALUE\"} as const)\r\nexport const SetValueFromLSAC = (value: number) => ({type: \"SET-VALUE-FROM-LS\", value} as const)\r\nexport const valueEqualMaxValueAC = () => ({type: \"VALUE-EQUAL-MAX-VALUE\"} as const)\r\nexport const SetMaxMinValueFromLSAC = (value: number, maxValue: number, minValue: number) => ({\r\n    type: \"SET-MAX-MIN-VALUE-FROM-LS\",\r\n    value,\r\n    maxValue,\r\n    minValue\r\n} as const)\r\n\r\n\r\nexport type IncCounterValueAT = ReturnType<typeof incCounterValueAC>\r\nexport type SetValueFromLSAT = ReturnType<typeof SetValueFromLSAC>\r\nexport type SetMaxMinValueFromLSAT = ReturnType<typeof SetMaxMinValueFromLSAC>\r\nexport type ResetCounterValueAT = ReturnType<typeof resetCounterValueAC>\r\nexport type ValueEqualMaxValueAT = ReturnType<typeof valueEqualMaxValueAC>\r\nexport type ErrorAT = ReturnType<typeof ErrorAC>\r\nexport type buttonSetDisabledAT = ReturnType<typeof buttonSetDisabledAC>\r\n\r\nexport type ActionType =\r\n    IncCounterValueAT\r\n    | SetValueFromLSAT\r\n    | SetMaxMinValueFromLSAT\r\n    | ResetCounterValueAT\r\n    | ValueEqualMaxValueAT\r\n    | ErrorAT\r\n    | buttonSetDisabledAT","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {SettingCount} from \"./components/Counter/SettingCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {\n    buttonSetDisabledAC, ErrorAC,\n    incCounterValueAC,\n    resetCounterValueAC, SetMaxMinValueFromLSAC, valueEqualMaxValueAC\n} from \"./redux/Reducer\";\n\n\nfunction App() {\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\n    const maxValueCounter = useSelector<AppStateType, number>(state => state.counter.maxValue)\n    const minValueCounter = useSelector<AppStateType, number>(state => state.counter.minValue)\n    const setDisabled = useSelector<AppStateType, boolean>(state => state.counter.setDisabled)\n    const incDisabled = useSelector<AppStateType, boolean>(state => state.counter.incDisabled)\n    const resetDisabled = useSelector<AppStateType, boolean>(state => state.counter.resetDisabled)\n    const dispatch = useDispatch()\n\n    // значения для setting counter до отправки в Local Storage\n    const [error, setError] = useState<string>(\"\")\n    const [maxValue, setMaxvalue] = useState<number>(maxValueCounter)\n    const [minValue, setMinvalue] = useState<number>(minValueCounter)\n\n\n// SETTING CЧЕТЧИК\n\n    // изменения макс и мин значений в settingСounter\n    const changeSettingValue = (maxValue: number, minValue: number) => {\n        if (maxValue <= minValue || maxValue < 0 || minValue < 0) {\n            dispatch(ErrorAC())\n            setError(\"Incorrect value\")\n        } else {\n            setError(\"\")\n        }\n        setMaxvalue(maxValue)\n        setMinvalue(minValue)\n        dispatch(buttonSetDisabledAC(maxValue, minValue))\n    }\n\n    // отправка значений в счетчик\n    function toDisplay() {\n        dispatch(SetMaxMinValueFromLSAC(value, maxValue, minValue))\n    }\n\n// CЧЕТЧИК\n\n    // функция ,изменяющая цифры на дисплее при нажатии на inc\n    function changeValue(value: number) {\n        dispatch(incCounterValueAC())\n        if (value >= maxValueCounter) {\n            dispatch(valueEqualMaxValueAC())\n        }\n    }\n\n    // функция ,сбрасывающая  цифры на дисплее при нажатии на reset\n    function resetValue() {\n        dispatch(resetCounterValueAC())\n    }\n\n    return (\n        <div className={\"App\"}>\n            <div className={\"main\"}>\n                <SettingCount maxValue={maxValue} minValue={minValue}\n                              changeSettingValue={changeSettingValue}\n                              toDisplay={toDisplay} error={error}\n                              setDisabled={setDisabled}/>\n                <Counter value={value} changeValue={changeValue}\n                         resetValue={resetValue}\n                         incDisabled={incDisabled}\n                         resetDisabled={resetDisabled}\n                         maxValue={maxValue} minValue={minValue}\n                         error={error}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./Reducer\";\r\nimport {loadState, saveState} from \"../utils/localStorage-utils\";\r\n\r\nconst rootReducer = combineReducers({counter: counterReducer})\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\n\r\n//сетаем в локал стор значения\r\nstore.subscribe(() => {\r\n    saveState(\r\n        {\r\n            counter: {\r\n                value: store.getState().counter.value,\r\n                maxValue: store.getState().counter.maxValue,\r\n                minValue: store.getState().counter.minValue,\r\n                incDisabled: store.getState().counter.incDisabled,\r\n                resetDisabled: store.getState().counter.resetDisabled,\r\n                setDisabled: store.getState().counter.setDisabled,\r\n            }\r\n        }\r\n    )\r\n\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n","\r\n// localStorage.js\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem(\"app-state\");\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n// localStorage.js\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"app-state\", serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}